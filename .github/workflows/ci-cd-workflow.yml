name: NASA Soil Prediction CI/CD Pipeline

on:
  push:
    branches: [main, dev]
    tags: ['v*.*.*']
  pull_request:
    branches: [main, dev]
  workflow_dispatch:
env:
  DOCKER_IMAGE: soil-prediction-app-soil-app
  REGISTRY_GHCR: ghcr.io
  REGISTRY_DOCKERHUB: docker.io
  KUBE_VERSION: '1.29'
  NODE_VERSION: '20'

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci --prefer-offline

      - name: Run Linters and Formatter Check
        run: |
          npm run lint
          npm run format:check

      - name: Run Unit Tests
        run: npm run test:ci
        env:
          CI: true
          NODE_OPTIONS: '--max_old_space_size=4096'

      - name: Build Application
        run: npm run build

  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: lint-and-test
    timeout-minutes: 45
    if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' || startsWith(github.ref, 'refs/tags/v') }}
    permissions:
      contents: read
      packages: write
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: DockerHub Login
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_DOCKERHUB }}
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: GHCR Login
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_GHCR }}/${{ github.repository }}
            ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKER_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}

      - name: Build and Push Docker Images
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/dev'
    environment:
      name: staging
      url: https://staging.soil-prediction.nasa.gov
    timeout-minutes: 30

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Deploy to Kubernetes (Staging)
        uses: azure/k8s-deploy@v4
        with:
          namespace: soil-prediction-staging
          manifests: |
            k8s/staging/deployment.yml
            k8s/staging/service.yml
            k8s/staging/ingress.yml
          images: |
            ${{ env.REGISTRY_GHCR }}/${{ github.repository }}:${{ github.sha }}
          strategy: rolling

      - name: Verify Deployment
        run: |
          kubectl rollout status deployment/nasa-soil-prediction-staging -n soil-prediction-staging --timeout=180s
        env:
          KUBECONFIG: ${{ secrets.STAGING_KUBECONFIG }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [lint-and-test, build-and-push]
    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: https://soil-prediction.nasa.gov
    timeout-minutes: 30

    steps:
      - name: Extract Semantic Version
        id: semver
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Deploy to Kubernetes (Production)
        uses: azure/k8s-deploy@v4
        with:
          namespace: soil-prediction-prod
          manifests: |
            k8s/production/deployment.yaml
            k8s/production/service.yaml
            k8s/production/ingress.yaml
          images: |
            ${{ env.REGISTRY_GHCR }}/${{ github.repository }}:${{ steps.semver.outputs.version }}
          strategy: rolling

      - name: Verify Deployment
        run: |
          kubectl rollout status deployment/nasa-soil-prediction-production -n soil-prediction-prod --timeout=180s
        env:
          KUBECONFIG: ${{ secrets.PRODUCTION_KUBECONFIG }}

  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/dev'
    timeout-minutes: 45
    env:
      HOST: 'https://staging.soil-prediction.nasa.gov'
      USERS: 1000
      DURATION: 300
      TEST_USER: 'test_user'
      TEST_PASSWORD: 'test_password'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Locust
        run: python -m pip install locust

      - name: Run Load Test
        run: |
          locust -f tests/performance/locustfile.py \
            --host $HOST \
            --users $USERS \
            --spawn-rate 100 \
            --run-time ${DURATION}s \
            --headless \
            --csv=loadtest_results \
            --html=loadtest_report.html \
            --loglevel INFO \
            --logfile locust.log
        env:
          LOCUST_TEST_USER: ${{ env.TEST_USER }}
          LOCUST_TEST_PASSWORD: ${{ env.TEST_PASSWORD }}

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: performance-test-results
          path: |
            loadtest_results*
            loadtest_report.html
            locust.log
