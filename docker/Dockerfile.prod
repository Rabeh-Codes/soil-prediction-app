# ---------- Stage 1: Build the app ----------
FROM node:20-alpine AS builder  

# 1Ô∏è‚É£ Install system build dependencies
RUN apk add --no-cache --virtual .build-deps \
    python3 \
    make \
    g++

# 2Ô∏è‚É£ Set working directory
WORKDIR /app

# 3Ô∏è‚É£ Copy dependency files (improve Docker cache usage)
COPY package.json package-lock.json ./

# 4Ô∏è‚É£ Install full dependencies (including devDependencies for build)
RUN npm ci --legacy-peer-deps

# 5Ô∏è‚É£ Copy application source code
COPY . .

# 6Ô∏è‚É£ Build the React app for production
RUN npm run build

# 7Ô∏è‚É£ Remove build-time dependencies to reduce image size
RUN apk del .build-deps


# ---------- Stage 2: Serve with Nginx ----------
FROM nginx:1.25-alpine  

# 8Ô∏è‚É£ Remove default Nginx static files
RUN rm -rf /usr/share/nginx/html/*

# 9Ô∏è‚É£ Copy the built app from the builder stage
COPY --from=builder /app/dist /usr/share/nginx/html

# üîü Copy custom Nginx configuration (must exist in project root)
COPY nginx.conf /etc/nginx/conf.d/default.conf

# 1Ô∏è‚É£1Ô∏è‚É£ Set proper permissions for files and folders
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    find /usr/share/nginx/html -type d -exec chmod 755 {} \; && \
    find /usr/share/nginx/html -type f -exec chmod 644 {} \;

# 1Ô∏è‚É£2Ô∏è‚É£ Expose port 80 for HTTP traffic
EXPOSE 80

# 1Ô∏è‚É£3Ô∏è‚É£ Health check to ensure Nginx is serving properly
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s \
  CMD wget -q -O /dev/null http://localhost || exit 1

# 1Ô∏è‚É£4Ô∏è‚É£ Start Nginx in foreground (prevent container from exiting)
CMD ["nginx", "-g", "daemon off;"]
